##背景
  - LightPackage的定位是Amazing引擎通用资源包，同时为更流畅的资源包生产流程提供基石，使设计师/RD/IE的协作与互联成为可能。
##目的
  - 提供引擎包商店
  - 提供引擎包管理平台
  - 规范特效包生产流程，提高特效包生产效率

##痛点
  - 多端传输预览步骤繁琐：设计师通过Windows的Maya/3ds max/photoshop等软件进行资源的生产，在MAC端通过Creator进行预览，
  中间经过的步骤是通过飞书发送/接收、格式转换、导入以及资源替换，对于频繁修改资源并且预览资源的设计师来说，这些步骤就是灾难了。
  - 版本迭代导致资源错误：设计师存在设计过的资源在某些Creator版本上不能使用的情况，LightPackage提供最小引擎版本信息，提前发现版本问题，解决因版本问题带来的时间损耗。
  - 多人协作效果难以验收：一个道具的生产是一系列复杂的资源的集合，协作方式上包含: 设计师与设计师，设计师与IE。为了使最终生产的资源符合预期，频繁的沟通以及校验效果带来的
  时间成本是非常可观的。比如一个资源同时包含2D动画跟3D动画，2D跟3D需要不同的设计人员来制作，但最终效果呈现上却需要2D与3D共同呈现，这使得多人协作的情况下，效果验收变得有一定的困难。

##解决方案
  - 资源包管理平台带来更高效的开发以及资源复用，LightPackage提供依赖配置。在项目开发过程中，IE可以配置依赖，通过Creator选择依赖模块中相关的资源或者脚本来加速新特效道具的开发。
  - LightPackage还提供版本管理功能，IE可以发布包的新版本以适配引擎/Creator更多高级的特性。同时引擎侧使用方在使用包的时候，也可以提示用户选择正确的资源包版本进行开发。

##主要负责内容
  - 资源管理平台数据库层的开发，使用ER图梳理各表之间的关系。利用分布式ID构建表结构。在gin框架下实现包资源的上传、添加、查找（精确以及模糊）、条件筛选。
  - 利用react框架+webpack搭建lightpackage前端页面，实现资源拖拽、点选上传。资源的详细信息展示以及个人信息展示。

##主要涉及技术
  - gin框架使用
  - 跨域配置
  - ER图
  - 分布式ID
  - react框架

##包资源上传
  - 资源上传的参数包含两个部分，资源信息&用户信息
    - 资源信息包括：包描述文件，包资源文件，包标签
      - 包描述文件包括：名称、版本、描述、展示名称、关键字、作者信息、依赖资源信息、最小引擎版本
    - 用户信息包括：邮箱、用户鉴权信息（token、过期时间、访问次数）

##简历表述
针对目前特效生产合作中存在的多端传输预览步骤繁琐、版本迭代导致资源错误等问题，搭建资源包管理平台lightpackage，主要负责数据库层以及web端的开发。
使用ERD梳理各实体之间的关系以设计数据库；在数据库设计中采用分布式ID，以应对高量级数据。使用go-mysql-driver操作数据库，为各数据表提供增删改查功能，使用事务保证数据的一致性。
开发资源上传接口，客户端使用form-data格式上传资源，服务端解析后上传至文件服务器并录入数据库。
利用react框架搭建web页面，使用flex进行页面布局，包括资源上传页面、资源展示页面以及个人信息页面；为了进行用户登录，页面加入跳转以及cookie的读存。
