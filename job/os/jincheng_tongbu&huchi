进程同步：同步亦称为制约关系，它是指为完成某种任务而建立的两个或多个进程，这些进程因为需要在某些位置上协调它们的工作次序而产生的制约关系，进程间的直接制约关系就是源于它们之间的相互合作。
进程互斥：进程互斥指当一个进程访问某临界资源时，另一个想要访问该资源的进程必须等待。当前访问临界资源的进程访问结束，释放该资源之后，另一个进程才能去访问临界资源。

临界资源：我们把一个时间段内只允许一个进程使用的资源称为临界资源。许多物理设备（比如摄像头、打印机）都属于临界资源。此外还有许多变量、数据、内存缓冲区等都属于临界资源。

对临界资源的访问，逻辑上可以分为如下四个部分：
进入区：负责检查是否可进入临界区，若可进入，则应设置正在访问临界资源的标志（可理解为“上锁”），以组织其他进程同时进入临界区
临界区：访问临界资源的那段代码
退出区：负责接触正在访问临界资源的标志（可理解为“解锁”）
剩余区：做其他处理

为了实现对临界资源的互斥访问，同时保证系统整体性能，需要遵循以下原则：
1、空闲让进：临界区空闲时，可以允许一个请求进入临界区的进程立即进入临界区
2、忙则等待：当已有进程进入临界区时，其他试图进入临界区的进程必须等待
3、有限等待：对请求访问的进程，应保证能在有限时间内进入临界区（保证不会饥饿）
4、让权等待：当进程不能进入临界区时，应立即释放处理机，防止进程忙等待


进程互斥的软件实现方法：
单标志法：两个进程在访问完临界区后，会把使用临界区的权限转交给另一个进程。也就是说每个进程进入临界区的权限只能被另一个进程赋予。
主要问题：违背空闲让进。
双标志先检查法：设置一个bool数组，数组中各个元素用来标记各进程想进入临界区的意愿。每个进程在进入临界区之前先检查当前有没有别的进程想进入临界区。
主要问题：违背忙则等待。
双标志后检查法：双标志先检查法的改版。先上锁后检查。
主要问题：违背空闲让进，有限等待。
Peterson算法：如果双方都想进入临界区，则尝试“谦让”，设置标志位，表明自己可以等待，主动让对方进入临界区。

进程互斥的硬件实现方法：
终端屏蔽方法：利用“开/关终端指令”实现（与原语的实现思想相同，即在某进程开始访问临界区到结束访问为止都不允许被中断，也就不可能发生进程切换，因此也不可能发生两个同时访问临界区的情况）
优点：简单高效
缺点：不适用于多处理机，只适用于操作系统内核进程，不适用于用户进程（因为中断指令只能运行在内核态，这组指令如果能让用户随意使用会很危险）
TS指令：
Swap指令：


信号量机制分为整型信号量和记录型信号量：
整型信号量存在的问题是不满足让权等待原则。
记录型信号量中既记录资源数量又记录等待进程的队列，先将资源数减一，然后检查资源数是否小于零，如果小于零直接释放CPU。
P操作中，一定先S.value++，之后可能需要执行block原语
V操作中，一定先S.value--,之后可能需要执行wakeup原语